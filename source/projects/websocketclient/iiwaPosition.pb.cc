// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iiwaPosition.proto

#include "iiwaPosition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_iiwaPosition_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_States_Frame_Position_iiwaPosition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_iiwaPosition_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_States_Frame_Rotation_iiwaPosition_2eproto;
namespace de {
namespace hsmainz {
namespace iiwa {
namespace messages {
namespace protocolbuffers {
class States_Frame_PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<States_Frame_Position> _instance;
} _States_Frame_Position_default_instance_;
class States_Frame_RotationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<States_Frame_Rotation> _instance;
} _States_Frame_Rotation_default_instance_;
class States_FrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<States_Frame> _instance;
} _States_Frame_default_instance_;
class StatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<States> _instance;
} _States_default_instance_;
}  // namespace protocolbuffers
}  // namespace messages
}  // namespace iiwa
}  // namespace hsmainz
}  // namespace de
static void InitDefaultsStates_Frame_Position_iiwaPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::de::hsmainz::iiwa::messages::protocolbuffers::_States_Frame_Position_default_instance_;
    new (ptr) ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_States_Frame_Position_iiwaPosition_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStates_Frame_Position_iiwaPosition_2eproto}, {}};

static void InitDefaultsStates_Frame_Rotation_iiwaPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::de::hsmainz::iiwa::messages::protocolbuffers::_States_Frame_Rotation_default_instance_;
    new (ptr) ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_States_Frame_Rotation_iiwaPosition_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStates_Frame_Rotation_iiwaPosition_2eproto}, {}};

static void InitDefaultsStates_Frame_iiwaPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::de::hsmainz::iiwa::messages::protocolbuffers::_States_Frame_default_instance_;
    new (ptr) ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_States_Frame_iiwaPosition_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStates_Frame_iiwaPosition_2eproto}, {
      &scc_info_States_Frame_Position_iiwaPosition_2eproto.base,
      &scc_info_States_Frame_Rotation_iiwaPosition_2eproto.base,}};

static void InitDefaultsStates_iiwaPosition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::de::hsmainz::iiwa::messages::protocolbuffers::_States_default_instance_;
    new (ptr) ::de::hsmainz::iiwa::messages::protocolbuffers::States();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::de::hsmainz::iiwa::messages::protocolbuffers::States::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_States_iiwaPosition_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStates_iiwaPosition_2eproto}, {}};

void InitDefaults_iiwaPosition_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_States_Frame_Position_iiwaPosition_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_States_Frame_Rotation_iiwaPosition_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_States_Frame_iiwaPosition_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_States_iiwaPosition_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_iiwaPosition_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_iiwaPosition_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_iiwaPosition_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_iiwaPosition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position, x_),
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position, y_),
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation, a_),
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation, b_),
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation, c_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame, position_),
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame, rotation_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::de::hsmainz::iiwa::messages::protocolbuffers::States, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position)},
  { 11, 19, sizeof(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation)},
  { 22, 29, sizeof(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame)},
  { 31, 36, sizeof(::de::hsmainz::iiwa::messages::protocolbuffers::States)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::de::hsmainz::iiwa::messages::protocolbuffers::_States_Frame_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::de::hsmainz::iiwa::messages::protocolbuffers::_States_Frame_Rotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::de::hsmainz::iiwa::messages::protocolbuffers::_States_Frame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::de::hsmainz::iiwa::messages::protocolbuffers::_States_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_iiwaPosition_2eproto = {
  {}, AddDescriptors_iiwaPosition_2eproto, "iiwaPosition.proto", schemas,
  file_default_instances, TableStruct_iiwaPosition_2eproto::offsets,
  file_level_metadata_iiwaPosition_2eproto, 4, file_level_enum_descriptors_iiwaPosition_2eproto, file_level_service_descriptors_iiwaPosition_2eproto,
};

const char descriptor_table_protodef_iiwaPosition_2eproto[] =
  "\n\022iiwaPosition.proto\022(de.hsmainz.iiwa.me"
  "ssages.protocolbuffers\"\222\002\n\006States\032\207\002\n\005Fr"
  "ame\022Q\n\010position\030\001 \002(\0132\?.de.hsmainz.iiwa."
  "messages.protocolbuffers.States.Frame.Po"
  "sition\022Q\n\010rotation\030\002 \002(\0132\?.de.hsmainz.ii"
  "wa.messages.protocolbuffers.States.Frame"
  ".Rotation\032+\n\010Position\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 "
  "\002(\001\022\t\n\001z\030\003 \002(\001\032+\n\010Rotation\022\t\n\001a\030\001 \002(\001\022\t\n"
  "\001b\030\002 \002(\001\022\t\n\001c\030\003 \002(\001B6\n(de.hsmainz.iiwa.m"
  "essages.protocolbuffersB\niiwaStates"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_iiwaPosition_2eproto = {
  false, InitDefaults_iiwaPosition_2eproto, 
  descriptor_table_protodef_iiwaPosition_2eproto,
  "iiwaPosition.proto", &assign_descriptors_table_iiwaPosition_2eproto, 395,
};

void AddDescriptors_iiwaPosition_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_iiwaPosition_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_iiwaPosition_2eproto = []() { AddDescriptors_iiwaPosition_2eproto(); return true; }();
namespace de {
namespace hsmainz {
namespace iiwa {
namespace messages {
namespace protocolbuffers {

// ===================================================================

void States_Frame_Position::InitAsDefaultInstance() {
}
class States_Frame_Position::HasBitSetters {
 public:
  static void set_has_x(States_Frame_Position* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_y(States_Frame_Position* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_z(States_Frame_Position* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int States_Frame_Position::kXFieldNumber;
const int States_Frame_Position::kYFieldNumber;
const int States_Frame_Position::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

States_Frame_Position::States_Frame_Position()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
}
States_Frame_Position::States_Frame_Position(const States_Frame_Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
}

void States_Frame_Position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

States_Frame_Position::~States_Frame_Position() {
  // @@protoc_insertion_point(destructor:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  SharedDtor();
}

void States_Frame_Position::SharedDtor() {
}

void States_Frame_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const States_Frame_Position& States_Frame_Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_States_Frame_Position_iiwaPosition_2eproto.base);
  return *internal_default_instance();
}


void States_Frame_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* States_Frame_Position::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<States_Frame_Position*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required double x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_x(val);
        break;
      }
      // required double y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_y(val);
        break;
      }
      // required double z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_z(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool States_Frame_Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_z(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void States_Frame_Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
}

::google::protobuf::uint8* States_Frame_Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  return target;
}

size_t States_Frame_Position::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t States_Frame_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void States_Frame_Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const States_Frame_Position* source =
      ::google::protobuf::DynamicCastToGenerated<States_Frame_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
    MergeFrom(*source);
  }
}

void States_Frame_Position::MergeFrom(const States_Frame_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void States_Frame_Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void States_Frame_Position::CopyFrom(const States_Frame_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool States_Frame_Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void States_Frame_Position::Swap(States_Frame_Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void States_Frame_Position::InternalSwap(States_Frame_Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::google::protobuf::Metadata States_Frame_Position::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_iiwaPosition_2eproto);
  return ::file_level_metadata_iiwaPosition_2eproto[kIndexInFileMessages];
}


// ===================================================================

void States_Frame_Rotation::InitAsDefaultInstance() {
}
class States_Frame_Rotation::HasBitSetters {
 public:
  static void set_has_a(States_Frame_Rotation* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_b(States_Frame_Rotation* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_c(States_Frame_Rotation* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int States_Frame_Rotation::kAFieldNumber;
const int States_Frame_Rotation::kBFieldNumber;
const int States_Frame_Rotation::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

States_Frame_Rotation::States_Frame_Rotation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
}
States_Frame_Rotation::States_Frame_Rotation(const States_Frame_Rotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_)) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
}

void States_Frame_Rotation::SharedCtor() {
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&a_)) + sizeof(c_));
}

States_Frame_Rotation::~States_Frame_Rotation() {
  // @@protoc_insertion_point(destructor:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  SharedDtor();
}

void States_Frame_Rotation::SharedDtor() {
}

void States_Frame_Rotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const States_Frame_Rotation& States_Frame_Rotation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_States_Frame_Rotation_iiwaPosition_2eproto.base);
  return *internal_default_instance();
}


void States_Frame_Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&c_) -
        reinterpret_cast<char*>(&a_)) + sizeof(c_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* States_Frame_Rotation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<States_Frame_Rotation*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required double a = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_a(val);
        break;
      }
      // required double b = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_b(val);
        break;
      }
      // required double c = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_c(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool States_Frame_Rotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_a(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_b(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double c = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_c(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void States_Frame_Rotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double a = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->a(), output);
  }

  // required double b = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->b(), output);
  }

  // required double c = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->c(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
}

::google::protobuf::uint8* States_Frame_Rotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->a(), target);
  }

  // required double b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->b(), target);
  }

  // required double c = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->c(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  return target;
}

size_t States_Frame_Rotation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  size_t total_size = 0;

  if (has_a()) {
    // required double a = 1;
    total_size += 1 + 8;
  }

  if (has_b()) {
    // required double b = 2;
    total_size += 1 + 8;
  }

  if (has_c()) {
    // required double c = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t States_Frame_Rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double a = 1;
    total_size += 1 + 8;

    // required double b = 2;
    total_size += 1 + 8;

    // required double c = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void States_Frame_Rotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  GOOGLE_DCHECK_NE(&from, this);
  const States_Frame_Rotation* source =
      ::google::protobuf::DynamicCastToGenerated<States_Frame_Rotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
    MergeFrom(*source);
  }
}

void States_Frame_Rotation::MergeFrom(const States_Frame_Rotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000004u) {
      c_ = from.c_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void States_Frame_Rotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void States_Frame_Rotation::CopyFrom(const States_Frame_Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool States_Frame_Rotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void States_Frame_Rotation::Swap(States_Frame_Rotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void States_Frame_Rotation::InternalSwap(States_Frame_Rotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
}

::google::protobuf::Metadata States_Frame_Rotation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_iiwaPosition_2eproto);
  return ::file_level_metadata_iiwaPosition_2eproto[kIndexInFileMessages];
}


// ===================================================================

void States_Frame::InitAsDefaultInstance() {
  ::de::hsmainz::iiwa::messages::protocolbuffers::_States_Frame_default_instance_._instance.get_mutable()->position_ = const_cast< ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position*>(
      ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position::internal_default_instance());
  ::de::hsmainz::iiwa::messages::protocolbuffers::_States_Frame_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation*>(
      ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation::internal_default_instance());
}
class States_Frame::HasBitSetters {
 public:
  static const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position& position(const States_Frame* msg);
  static void set_has_position(States_Frame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation& rotation(const States_Frame* msg);
  static void set_has_rotation(States_Frame* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position&
States_Frame::HasBitSetters::position(const States_Frame* msg) {
  return *msg->position_;
}
const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation&
States_Frame::HasBitSetters::rotation(const States_Frame* msg) {
  return *msg->rotation_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int States_Frame::kPositionFieldNumber;
const int States_Frame::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

States_Frame::States_Frame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
}
States_Frame::States_Frame(const States_Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_rotation()) {
    rotation_ = new ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
}

void States_Frame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_States_Frame_iiwaPosition_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(rotation_));
}

States_Frame::~States_Frame() {
  // @@protoc_insertion_point(destructor:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  SharedDtor();
}

void States_Frame::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void States_Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const States_Frame& States_Frame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_States_Frame_iiwaPosition_2eproto.base);
  return *internal_default_instance();
}


void States_Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rotation_ != nullptr);
      rotation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* States_Frame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<States_Frame*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation rotation = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation::_InternalParse;
        object = msg->mutable_rotation();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool States_Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void States_Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::rotation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
}

::google::protobuf::uint8* States_Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), deterministic, target);
  }

  // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::rotation(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  return target;
}

size_t States_Frame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  size_t total_size = 0;

  if (has_position()) {
    // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (has_rotation()) {
    // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation rotation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  return total_size;
}
size_t States_Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position position = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);

    // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation rotation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rotation_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void States_Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const States_Frame* source =
      ::google::protobuf::DynamicCastToGenerated<States_Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
    MergeFrom(*source);
  }
}

void States_Frame::MergeFrom(const States_Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rotation()->::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation::MergeFrom(from.rotation());
    }
  }
}

void States_Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void States_Frame::CopyFrom(const States_Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool States_Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_rotation()) {
    if (!this->rotation_->IsInitialized()) return false;
  }
  return true;
}

void States_Frame::Swap(States_Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void States_Frame::InternalSwap(States_Frame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
}

::google::protobuf::Metadata States_Frame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_iiwaPosition_2eproto);
  return ::file_level_metadata_iiwaPosition_2eproto[kIndexInFileMessages];
}


// ===================================================================

void States::InitAsDefaultInstance() {
}
class States::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

States::States()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:de.hsmainz.iiwa.messages.protocolbuffers.States)
}
States::States(const States& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:de.hsmainz.iiwa.messages.protocolbuffers.States)
}

void States::SharedCtor() {
}

States::~States() {
  // @@protoc_insertion_point(destructor:de.hsmainz.iiwa.messages.protocolbuffers.States)
  SharedDtor();
}

void States::SharedDtor() {
}

void States::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const States& States::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_States_iiwaPosition_2eproto.base);
  return *internal_default_instance();
}


void States::Clear() {
// @@protoc_insertion_point(message_clear_start:de.hsmainz.iiwa.messages.protocolbuffers.States)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* States::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<States*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool States::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:de.hsmainz.iiwa.messages.protocolbuffers.States)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:de.hsmainz.iiwa.messages.protocolbuffers.States)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:de.hsmainz.iiwa.messages.protocolbuffers.States)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void States::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:de.hsmainz.iiwa.messages.protocolbuffers.States)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:de.hsmainz.iiwa.messages.protocolbuffers.States)
}

::google::protobuf::uint8* States::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:de.hsmainz.iiwa.messages.protocolbuffers.States)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:de.hsmainz.iiwa.messages.protocolbuffers.States)
  return target;
}

size_t States::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:de.hsmainz.iiwa.messages.protocolbuffers.States)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void States::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States)
  GOOGLE_DCHECK_NE(&from, this);
  const States* source =
      ::google::protobuf::DynamicCastToGenerated<States>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:de.hsmainz.iiwa.messages.protocolbuffers.States)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:de.hsmainz.iiwa.messages.protocolbuffers.States)
    MergeFrom(*source);
  }
}

void States::MergeFrom(const States& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void States::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void States::CopyFrom(const States& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:de.hsmainz.iiwa.messages.protocolbuffers.States)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool States::IsInitialized() const {
  return true;
}

void States::Swap(States* other) {
  if (other == this) return;
  InternalSwap(other);
}
void States::InternalSwap(States* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata States::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_iiwaPosition_2eproto);
  return ::file_level_metadata_iiwaPosition_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocolbuffers
}  // namespace messages
}  // namespace iiwa
}  // namespace hsmainz
}  // namespace de
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position* Arena::CreateMaybeMessage< ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position >(Arena* arena) {
  return Arena::CreateInternal< ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation* Arena::CreateMaybeMessage< ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation >(Arena* arena) {
  return Arena::CreateInternal< ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation >(arena);
}
template<> PROTOBUF_NOINLINE ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame* Arena::CreateMaybeMessage< ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame >(Arena* arena) {
  return Arena::CreateInternal< ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::de::hsmainz::iiwa::messages::protocolbuffers::States* Arena::CreateMaybeMessage< ::de::hsmainz::iiwa::messages::protocolbuffers::States >(Arena* arena) {
  return Arena::CreateInternal< ::de::hsmainz::iiwa::messages::protocolbuffers::States >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
