// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iiwaPosition.proto

#ifndef PROTOBUF_INCLUDED_iiwaPosition_2eproto
#define PROTOBUF_INCLUDED_iiwaPosition_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_iiwaPosition_2eproto 

namespace protobuf_iiwaPosition_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_iiwaPosition_2eproto
namespace de {
namespace hsmainz {
namespace iiwa {
namespace messages {
namespace protocolbuffers {
class States;
class StatesDefaultTypeInternal;
extern StatesDefaultTypeInternal _States_default_instance_;
class States_Frame;
class States_FrameDefaultTypeInternal;
extern States_FrameDefaultTypeInternal _States_Frame_default_instance_;
class States_Frame_Position;
class States_Frame_PositionDefaultTypeInternal;
extern States_Frame_PositionDefaultTypeInternal _States_Frame_Position_default_instance_;
class States_Frame_Rotation;
class States_Frame_RotationDefaultTypeInternal;
extern States_Frame_RotationDefaultTypeInternal _States_Frame_Rotation_default_instance_;
}  // namespace protocolbuffers
}  // namespace messages
}  // namespace iiwa
}  // namespace hsmainz
}  // namespace de
namespace google {
namespace protobuf {
template<> ::de::hsmainz::iiwa::messages::protocolbuffers::States* Arena::CreateMaybeMessage<::de::hsmainz::iiwa::messages::protocolbuffers::States>(Arena*);
template<> ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame* Arena::CreateMaybeMessage<::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame>(Arena*);
template<> ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position* Arena::CreateMaybeMessage<::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position>(Arena*);
template<> ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation* Arena::CreateMaybeMessage<::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace de {
namespace hsmainz {
namespace iiwa {
namespace messages {
namespace protocolbuffers {

// ===================================================================

class States_Frame_Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position) */ {
 public:
  States_Frame_Position();
  virtual ~States_Frame_Position();

  States_Frame_Position(const States_Frame_Position& from);

  inline States_Frame_Position& operator=(const States_Frame_Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  States_Frame_Position(States_Frame_Position&& from) noexcept
    : States_Frame_Position() {
    *this = ::std::move(from);
  }

  inline States_Frame_Position& operator=(States_Frame_Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const States_Frame_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const States_Frame_Position* internal_default_instance() {
    return reinterpret_cast<const States_Frame_Position*>(
               &_States_Frame_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(States_Frame_Position* other);
  friend void swap(States_Frame_Position& a, States_Frame_Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline States_Frame_Position* New() const final {
    return CreateMaybeMessage<States_Frame_Position>(NULL);
  }

  States_Frame_Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<States_Frame_Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const States_Frame_Position& from);
  void MergeFrom(const States_Frame_Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(States_Frame_Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // required double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::protobuf_iiwaPosition_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class States_Frame_Rotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation) */ {
 public:
  States_Frame_Rotation();
  virtual ~States_Frame_Rotation();

  States_Frame_Rotation(const States_Frame_Rotation& from);

  inline States_Frame_Rotation& operator=(const States_Frame_Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  States_Frame_Rotation(States_Frame_Rotation&& from) noexcept
    : States_Frame_Rotation() {
    *this = ::std::move(from);
  }

  inline States_Frame_Rotation& operator=(States_Frame_Rotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const States_Frame_Rotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const States_Frame_Rotation* internal_default_instance() {
    return reinterpret_cast<const States_Frame_Rotation*>(
               &_States_Frame_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(States_Frame_Rotation* other);
  friend void swap(States_Frame_Rotation& a, States_Frame_Rotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline States_Frame_Rotation* New() const final {
    return CreateMaybeMessage<States_Frame_Rotation>(NULL);
  }

  States_Frame_Rotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<States_Frame_Rotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const States_Frame_Rotation& from);
  void MergeFrom(const States_Frame_Rotation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(States_Frame_Rotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double a = 1;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 1;
  double a() const;
  void set_a(double value);

  // required double b = 2;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 2;
  double b() const;
  void set_b(double value);

  // required double c = 3;
  bool has_c() const;
  void clear_c();
  static const int kCFieldNumber = 3;
  double c() const;
  void set_c(double value);

  // @@protoc_insertion_point(class_scope:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation)
 private:
  void set_has_a();
  void clear_has_a();
  void set_has_b();
  void clear_has_b();
  void set_has_c();
  void clear_has_c();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double a_;
  double b_;
  double c_;
  friend struct ::protobuf_iiwaPosition_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class States_Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame) */ {
 public:
  States_Frame();
  virtual ~States_Frame();

  States_Frame(const States_Frame& from);

  inline States_Frame& operator=(const States_Frame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  States_Frame(States_Frame&& from) noexcept
    : States_Frame() {
    *this = ::std::move(from);
  }

  inline States_Frame& operator=(States_Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const States_Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const States_Frame* internal_default_instance() {
    return reinterpret_cast<const States_Frame*>(
               &_States_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(States_Frame* other);
  friend void swap(States_Frame& a, States_Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline States_Frame* New() const final {
    return CreateMaybeMessage<States_Frame>(NULL);
  }

  States_Frame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<States_Frame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const States_Frame& from);
  void MergeFrom(const States_Frame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(States_Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef States_Frame_Position Position;
  typedef States_Frame_Rotation Rotation;

  // accessors -------------------------------------------------------

  // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position& _internal_position() const;
  public:
  const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position& position() const;
  ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position* release_position();
  ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position* mutable_position();
  void set_allocated_position(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position* position);

  // required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  private:
  const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation& _internal_rotation() const;
  public:
  const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation& rotation() const;
  ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation* release_rotation();
  ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation* mutable_rotation();
  void set_allocated_rotation(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation* rotation);

  // @@protoc_insertion_point(class_scope:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame)
 private:
  void set_has_position();
  void clear_has_position();
  void set_has_rotation();
  void clear_has_rotation();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position* position_;
  ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation* rotation_;
  friend struct ::protobuf_iiwaPosition_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class States : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:de.hsmainz.iiwa.messages.protocolbuffers.States) */ {
 public:
  States();
  virtual ~States();

  States(const States& from);

  inline States& operator=(const States& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  States(States&& from) noexcept
    : States() {
    *this = ::std::move(from);
  }

  inline States& operator=(States&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const States& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const States* internal_default_instance() {
    return reinterpret_cast<const States*>(
               &_States_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(States* other);
  friend void swap(States& a, States& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline States* New() const final {
    return CreateMaybeMessage<States>(NULL);
  }

  States* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<States>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const States& from);
  void MergeFrom(const States& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(States* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef States_Frame Frame;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:de.hsmainz.iiwa.messages.protocolbuffers.States)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_iiwaPosition_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// States_Frame_Position

// required double x = 1;
inline bool States_Frame_Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void States_Frame_Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void States_Frame_Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void States_Frame_Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double States_Frame_Position::x() const {
  // @@protoc_insertion_point(field_get:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position.x)
  return x_;
}
inline void States_Frame_Position::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position.x)
}

// required double y = 2;
inline bool States_Frame_Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void States_Frame_Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void States_Frame_Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void States_Frame_Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double States_Frame_Position::y() const {
  // @@protoc_insertion_point(field_get:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position.y)
  return y_;
}
inline void States_Frame_Position::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position.y)
}

// required double z = 3;
inline bool States_Frame_Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void States_Frame_Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void States_Frame_Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void States_Frame_Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double States_Frame_Position::z() const {
  // @@protoc_insertion_point(field_get:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position.z)
  return z_;
}
inline void States_Frame_Position::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position.z)
}

// -------------------------------------------------------------------

// States_Frame_Rotation

// required double a = 1;
inline bool States_Frame_Rotation::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void States_Frame_Rotation::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void States_Frame_Rotation::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void States_Frame_Rotation::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double States_Frame_Rotation::a() const {
  // @@protoc_insertion_point(field_get:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation.a)
  return a_;
}
inline void States_Frame_Rotation::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation.a)
}

// required double b = 2;
inline bool States_Frame_Rotation::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void States_Frame_Rotation::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void States_Frame_Rotation::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void States_Frame_Rotation::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline double States_Frame_Rotation::b() const {
  // @@protoc_insertion_point(field_get:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation.b)
  return b_;
}
inline void States_Frame_Rotation::set_b(double value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation.b)
}

// required double c = 3;
inline bool States_Frame_Rotation::has_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void States_Frame_Rotation::set_has_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void States_Frame_Rotation::clear_has_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void States_Frame_Rotation::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline double States_Frame_Rotation::c() const {
  // @@protoc_insertion_point(field_get:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation.c)
  return c_;
}
inline void States_Frame_Rotation::set_c(double value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation.c)
}

// -------------------------------------------------------------------

// States_Frame

// required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Position position = 1;
inline bool States_Frame::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void States_Frame::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void States_Frame::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void States_Frame::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
inline const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position& States_Frame::_internal_position() const {
  return *position_;
}
inline const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position& States_Frame::position() const {
  const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position* p = position_;
  // @@protoc_insertion_point(field_get:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.position)
  return p != NULL ? *p : *reinterpret_cast<const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position*>(
      &::de::hsmainz::iiwa::messages::protocolbuffers::_States_Frame_Position_default_instance_);
}
inline ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position* States_Frame::release_position() {
  // @@protoc_insertion_point(field_release:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.position)
  clear_has_position();
  ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position* States_Frame::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.position)
  return position_;
}
inline void States_Frame::set_allocated_position(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Position* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.position)
}

// required .de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.Rotation rotation = 2;
inline bool States_Frame::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void States_Frame::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void States_Frame::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void States_Frame::clear_rotation() {
  if (rotation_ != NULL) rotation_->Clear();
  clear_has_rotation();
}
inline const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation& States_Frame::_internal_rotation() const {
  return *rotation_;
}
inline const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation& States_Frame::rotation() const {
  const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation* p = rotation_;
  // @@protoc_insertion_point(field_get:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation*>(
      &::de::hsmainz::iiwa::messages::protocolbuffers::_States_Frame_Rotation_default_instance_);
}
inline ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation* States_Frame::release_rotation() {
  // @@protoc_insertion_point(field_release:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.rotation)
  clear_has_rotation();
  ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation* States_Frame::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.rotation)
  return rotation_;
}
inline void States_Frame::set_allocated_rotation(::de::hsmainz::iiwa::messages::protocolbuffers::States_Frame_Rotation* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_;
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:de.hsmainz.iiwa.messages.protocolbuffers.States.Frame.rotation)
}

// -------------------------------------------------------------------

// States

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocolbuffers
}  // namespace messages
}  // namespace iiwa
}  // namespace hsmainz
}  // namespace de

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_iiwaPosition_2eproto
